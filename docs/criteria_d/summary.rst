*******
Summary
*******

:ref:`Cryptographic criteria Table <Criteria>` lists the member functions related to these criteria.

.. _Criteria:

+----------------------------------------------------------------------------------------------+
| Cryptographic criteria                                                                       |
+==========================================+===================================================+
| **SYNTAX**                               | **DESCRIPTION**                                   |
+------------------------------------------+---------------------------------------------------+
| :code:`void deg(int& d, VBF& F)`         | :math:`\crit{DEG}(F)=d`                           |
+------------------------------------------+---------------------------------------------------+
| :code:`void nl(NTL::RR& x, VBF& F)`      | :math:`\crit{NL}(F)=x`                            |
+------------------------------------------+---------------------------------------------------+
| :code:`void nlr(long& x, VBF& F, int r)` | :math:`\crit{NL}_r(F)=x`                          |
+------------------------------------------+---------------------------------------------------+
| :code:`void Bal(int& bal, VBF& F)`       | If *F* is balanced returns *1*, otherwise *0*     |
+------------------------------------------+---------------------------------------------------+
| :code:`void CI(int& t, VBF& F)`          | *F* is an :math:`(n,m,t)-\crit{CI}`               |
+------------------------------------------+---------------------------------------------------+
| :code:`void AI(int& i, VBF& F)`          | :math:`\crit{AI}(F)=i`                            |
+------------------------------------------+---------------------------------------------------+
| :code:`void maxAC(NTL::ZZ& x, VBF& F)`   | *F* has absolute indicator *x*                    |
+------------------------------------------+---------------------------------------------------+
| :code:`void sigma(NTL::ZZ& x, VBF& F)`   | *F* has sum-of-squares indicator *x*              |
+------------------------------------------+---------------------------------------------------+
| :code:`void ld(NTL::RR& x, VBF& F)`      | :math:`\crit{LD}(F)=x`                            |
+------------------------------------------+---------------------------------------------------+
| :code:`void PC(int& l, VBF& F)`          | *F* satisfies the :math:`\crit{PC}(l)`            |
+------------------------------------------+---------------------------------------------------+

:ref:`Member functions Table <Info>` lists the member functions related to bounds and other properties of above criteria.

+-----------------------------------------------------------------------------------------------------+
| Member functions of the cryptographic criteria                                                      |
+=================================================+===================================================+
| **SYNTAX**                                      | **DESCRIPTION**                                   |
+-------------------------------------------------+---------------------------------------------------+
| :code:`void SpectralRadius(NTL::ZZ& x, VBF& F)` | Spectral Radius                                   |
+-------------------------------------------------+---------------------------------------------------+
| :code:`NTL::RR nlmax(VBF& F)`                   | Maximum possible nonlinearity                     |
+-------------------------------------------------+---------------------------------------------------+
| :code:`void typenl(int& typenl, VBF& F)`        | 1=Bent, 2=Almost Bent, 3=Linear                   |
+-------------------------------------------------+---------------------------------------------------+
| :code:`int aimax(VBF& F)`                       | Maximum possible algebraic immunity               |
+-------------------------------------------------+---------------------------------------------------+
| :code:`NTL::ZZ maxACmax(VBF& F)`                | Maximum possible absolute indicator               |
+-------------------------------------------------+---------------------------------------------------+
| :code:`NTL::ZZ maxsigma(VBF& F)`                | Maximum possible sum-of-square indicator          |
+-------------------------------------------------+---------------------------------------------------+
| :code:`NTL::ZZ minsigma(VBF& F)`                | Minimum possible sum-of-square indicator          |
+-------------------------------------------------+---------------------------------------------------+
| :code:`NTL::RR ldmax(VBF& F)`                   | Maximum possible linearity distance               |
+-------------------------------------------------+---------------------------------------------------+